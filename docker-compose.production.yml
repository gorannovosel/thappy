# Production Docker Compose Configuration
# Clean, secure, and optimized for Digital Ocean deployment
# No RabbitMQ - simplified architecture

version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: thappy-postgres-prod
    environment:
      POSTGRES_USER: ${DB_USER:-thappy}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-thappy}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups  # For database backups
    networks:
      - thappy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-thappy} -d ${DB_NAME:-thappy}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Application server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: thappy-backend-prod
    environment:
      # Server configuration
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8081

      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-thappy}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-thappy}
      DB_SSLMODE: ${DB_SSLMODE:-require}

      # Authentication configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_TOKEN_TTL: ${JWT_TOKEN_TTL:-24h}

      # Application configuration
      APP_NAME: thappy
      APP_VERSION: ${APP_VERSION:-1.0.0}
      APP_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DEBUG: false

      # CORS configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-https://thappy.com}
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - thappy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend React application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8081}
    container_name: thappy-frontend-prod
    ports:
      - "80:80"
    networks:
      - thappy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx reverse proxy and SSL termination
  nginx:
    image: nginx:alpine
    container_name: thappy-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl:ro
      - ./deploy/nginx/certbot:/var/www/certbot:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - thappy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database migrations (runs once)
  migrate:
    image: migrate/migrate
    container_name: thappy-migrate-prod
    volumes:
      - ./migrations:/migrations:Z
    networks:
      - thappy-network
    depends_on:
      postgres:
        condition: service_healthy
    command: [
      "-path", "/migrations",
      "-database", "postgres://${DB_USER:-thappy}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-thappy}?sslmode=${DB_SSLMODE:-require}",
      "up"
    ]
    restart: "no"

# Networks
networks:
  thappy-network:
    driver: bridge
    name: thappy-network-prod

# Volumes
volumes:
  postgres_data:
    driver: local
    name: thappy-postgres-data-prod
  nginx_cache:
    driver: local
    name: thappy-nginx-cache-prod