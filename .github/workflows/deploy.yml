name: Deploy to Digital Ocean

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger via gh CLI
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DO_CONTEXT: thappy
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Run tests before deployment
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install backend dependencies
        run: go mod download

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install

      - name: Run backend tests
        run: go test -v -race ./...

      # Temporarily disabled due to test configuration issues
      # - name: Run frontend tests
      #   working-directory: ./frontend
      #   run: pnpm test:ci

      - name: Build test images
        run: |
          docker build -t thappy-backend:test .
          docker build -t thappy-frontend:test ./frontend

  # Deploy to Digital Ocean
  deploy:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        if: false  # Enable if using Kubernetes
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 thappy-cluster

      - name: Get droplet IP
        id: droplet
        run: |
          # Use default context since digitalocean/action-doctl sets that up
          DROPLET_IP=$(doctl compute droplet list --format PublicIPv4,Name --no-header | grep thappy-prod | awk '{print $1}')
          echo "ip=$DROPLET_IP" >> $GITHUB_OUTPUT
          echo "Droplet IP: $DROPLET_IP"

          # Verify IP was found
          if [ -z "$DROPLET_IP" ]; then
            echo "ERROR: Could not find droplet IP"
            doctl compute droplet list
            exit 1
          fi

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.droplet.outputs.ip }} >> ~/.ssh/known_hosts

      - name: Create deployment environment
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD_PROD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_PROD }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
        run: |
          # Create .env file locally with proper variable substitution
          cat > .env.production << EOF
          # Server Configuration
          SERVER_HOST=0.0.0.0
          SERVER_PORT=8081
          SERVER_READ_TIMEOUT=30s
          SERVER_WRITE_TIMEOUT=30s
          SERVER_IDLE_TIMEOUT=120s

          # Database Configuration (Production)
          DB_HOST=postgres
          DB_PORT=5432
          DB_USER=thappy
          DB_PASSWORD=${DB_PASSWORD}
          DB_NAME=thappy
          DB_SSLMODE=disable
          DB_MAX_OPEN_CONNS=25
          DB_MAX_IDLE_CONNS=5
          DB_CONN_MAX_LIFETIME=300s

          # Authentication Configuration (Production)
          JWT_SECRET=${JWT_SECRET}
          JWT_TOKEN_TTL=24h
          JWT_REFRESH_TTL=168h
          BCRYPT_COST=12

          # Application Configuration (Production)
          APP_NAME=thappy
          APP_VERSION=${{ github.sha }}
          APP_ENV=production
          LOG_LEVEL=info
          DEBUG=false

          # CORS Configuration
          CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
          EOF

          # Ensure deployment directory exists on server
          ssh deploy@${{ steps.droplet.outputs.ip }} "mkdir -p /opt/thappy"

          # Copy environment file to server
          scp -i ~/.ssh/id_rsa .env.production deploy@${{ steps.droplet.outputs.ip }}:/opt/thappy/

      - name: Deploy application
        run: |
          ssh deploy@${{ steps.droplet.outputs.ip }} "
            cd /opt/thappy &&
            if [ ! -d .git ]; then
              git clone https://github.com/${{ github.repository }} .
            fi &&
            git fetch origin &&
            git reset --hard origin/main &&
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production down || true &&
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production up -d --build postgres backend frontend &&
            sleep 15 &&
            sudo docker run --rm --network thappy-network-prod -v /opt/thappy/migrations:/migrations migrate/migrate -path=/migrations -database='postgres://thappy:\${DB_PASSWORD}@postgres:5432/thappy?sslmode=disable' up &&
            sudo docker system prune -af --volumes || true
          "

      - name: Health check
        run: |
          echo "Waiting for services to be healthy..."
          sleep 45

          # Check frontend health with retries
          echo "Checking frontend health..."
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ steps.droplet.outputs.ip }}/health)
            if [ "$response" = "200" ]; then
              echo "✅ Frontend is healthy (attempt $i)"
              break
            fi
            echo "Frontend health check attempt $i failed with status: $response"
            if [ $i -eq 5 ]; then
              echo "❌ Frontend health check failed after 5 attempts"
              exit 1
            fi
            sleep 10
          done

          # Check backend health via API functionality
          echo "Checking backend health via API..."
          for i in {1..5}; do
            therapies_count=$(curl -s http://${{ steps.droplet.outputs.ip }}/api/therapies | jq -r '.therapies | length' 2>/dev/null || echo "0")
            if [ "$therapies_count" -gt "0" ]; then
              echo "✅ Backend is healthy - API returned $therapies_count therapies (attempt $i)"
              break
            fi
            echo "Backend health check attempt $i failed - API returned $therapies_count therapies"
            if [ $i -eq 5 ]; then
              echo "❌ Backend health check failed after 5 attempts"
              exit 1
            fi
            sleep 10
          done

          echo "🎉 All services are healthy and functional!"

      # Deployment record creation disabled due to GitHub token permissions
      # - name: Create deployment record
      #   if: success()
      #   run: echo "Deployment completed successfully"

  # Rollback job (manual trigger only)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production-rollback

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Need previous commit

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}

      - name: Get droplet IP
        id: droplet
        run: |
          # Use default context since digitalocean/action-doctl sets that up
          DROPLET_IP=$(doctl compute droplet list --format PublicIPv4,Name --no-header | grep thappy-prod | awk '{print $1}')
          echo "ip=$DROPLET_IP" >> $GITHUB_OUTPUT

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.droplet.outputs.ip }} >> ~/.ssh/known_hosts

      - name: Perform rollback
        run: |
          PREVIOUS_SHA=$(git rev-parse HEAD~1)
          echo "Rolling back to commit: $PREVIOUS_SHA"

          ssh deploy@${{ steps.droplet.outputs.ip }} "
            cd /opt/thappy &&
            git fetch origin &&
            git reset --hard $PREVIOUS_SHA &&
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production down &&
            sudo docker-compose -f docker-compose.production.yml --env-file .env.production up -d --build &&
            echo '✅ Rollback completed to $PREVIOUS_SHA'
          "

  # Notification job
  notify:
    name: Send Notifications
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send deployment notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🚀 Deployment successful!"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Message: ${{ github.event.head_commit.message }}"

          # Add Slack/Discord webhook notification here if needed
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"Deployment successful for Thappy!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send failure notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs for details."

          # Add Slack/Discord webhook notification here if needed