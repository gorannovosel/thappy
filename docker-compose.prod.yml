version: '3.8'

services:
  # PostgreSQL database - Production configuration
  postgres:
    image: postgres:15-alpine
    container_name: thappy-postgres-prod
    environment:
      POSTGRES_USER: ${DB_USER:-thappy}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-thappy}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - thappy-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-thappy} -d ${DB_NAME:-thappy}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # RabbitMQ message broker - Production configuration
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: thappy-rabbitmq-prod
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-thappy}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      # Management UI only accessible locally in production
      - "127.0.0.1:15672:15672"
    volumes:
      - rabbitmq_prod_data:/var/lib/rabbitmq
    networks:
      - thappy-prod-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Application server - Production configuration
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: thappy-api-prod
    environment:
      # Server configuration
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080

      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-thappy}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-thappy}
      DB_SSLMODE: ${DB_SSLMODE:-require}

      # RabbitMQ configuration
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-thappy}:${RABBITMQ_PASSWORD}@rabbitmq:5672/

      # Authentication configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_TOKEN_TTL: ${JWT_TOKEN_TTL:-24h}

      # Application configuration
      APP_NAME: thappy
      APP_VERSION: ${APP_VERSION:-1.0.0}
      APP_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DEBUG: false
    ports:
      - "${API_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - thappy-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend React application - Production configuration
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: thappy-frontend-prod
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - api
    networks:
      - thappy-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Database migrations (runs once)
  migrate:
    image: migrate/migrate
    container_name: thappy-migrate-prod
    volumes:
      - ./migrations:/migrations:Z
    networks:
      - thappy-prod-network
    depends_on:
      postgres:
        condition: service_healthy
    command: [
      "-path", "/migrations",
      "-database", "postgres://${DB_USER:-thappy}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-thappy}?sslmode=${DB_SSLMODE:-require}",
      "up"
    ]
    restart: "no"

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: thappy-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - api
    networks:
      - thappy-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Networks
networks:
  thappy-prod-network:
    driver: bridge
    name: thappy-prod-network

# Volumes
volumes:
  postgres_prod_data:
    driver: local
    name: thappy-postgres-prod-data
  rabbitmq_prod_data:
    driver: local
    name: thappy-rabbitmq-prod-data