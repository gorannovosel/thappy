services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: thappy-postgres-prod
    environment:
      POSTGRES_USER: ${DB_USER:-thappy}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-thappy}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - thappy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-thappy} -d ${DB_NAME:-thappy}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Application server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: thappy-api-prod
    environment:
      # Server configuration
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: ${SERVER_PORT:-8081}

      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-thappy}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-thappy}
      DB_SSLMODE: ${DB_SSLMODE:-require}

      # Authentication configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_TOKEN_TTL: ${JWT_TOKEN_TTL:-24h}

      # Application configuration
      APP_NAME: thappy
      APP_VERSION: ${APP_VERSION:-1.0.0}
      APP_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DEBUG: false
    ports:
      - "${SERVER_PORT:-8081}:${SERVER_PORT:-8081}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - thappy-network
    restart: unless-stopped

  # Frontend React application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: thappy-frontend-prod
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - api
    networks:
      - thappy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database migrations (runs once)
  migrate:
    image: migrate/migrate
    container_name: thappy-migrate-prod
    volumes:
      - ./migrations:/migrations:Z
    networks:
      - thappy-network
    depends_on:
      postgres:
        condition: service_healthy
    command: [
      "-path", "/migrations",
      "-database", "postgres://${DB_USER:-thappy}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-thappy}?sslmode=${DB_SSLMODE:-require}",
      "up"
    ]

# Networks
networks:
  thappy-network:
    driver: bridge
    name: thappy-network-prod

# Volumes
volumes:
  postgres_data:
    driver: local
    name: thappy-postgres-data-prod